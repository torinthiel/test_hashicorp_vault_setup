- name: setup postgres database for storage
  hosts: postgres
  gather_facts: no
  vars:
    login_user: postgres
  vars_files:
  - setup_vault_vars.yaml
  - setup_vault_vault.yaml
  tasks:
  - name: create database for vault
    postgresql_db:
      name: '{{vault_db}}'
      login_host: '{{ansible_host}}'
      login_password: '{{login_password}}'
      state: present
    delegate_to: 127.0.0.1
  - name: enforce more strict permission control
    postgresql_privs:
      login_host: '{{ansible_host}}'
      login_password: '{{login_password}}'
      database: '{{vault_db}}'
      objs: public
      privs: CREATE
      role: PUBLIC
      state: absent
      type: schema
    delegate_to: 127.0.0.1
  - name: create storage table for vault
    postgresql_table:
      name: '{{kv_table}}'
      login_host: '{{ansible_host}}'
      login_password: '{{login_password}}'
      state: present
      db: '{{vault_db}}'
      columns:
      - parent_path TEXT COLLATE "C" NOT NULL
      - path        TEXT COLLATE "C"
      - key         TEXT COLLATE "C"
      - value       BYTEA
      - CONSTRAINT pkey PRIMARY KEY (path, key)
    delegate_to: 127.0.0.1
  - name: create index on storage table
    postgresql_idx:
      name: parent_path_idx
      login_host: '{{ansible_host}}'
      login_password: '{{login_password}}'
      state: present
      db: '{{vault_db}}'
      table: '{{kv_table}}'
      columns: parent_path
    delegate_to: 127.0.0.1
  - name: create HA table for vault
    postgresql_table:
      name: '{{ha_table}}'
      login_host: '{{ansible_host}}'
      login_password: '{{login_password}}'
      state: present
      db: '{{vault_db}}'
      columns:
      - ha_key      TEXT COLLATE "C" NOT NULL PRIMARY KEY
      - ha_identity TEXT COLLATE "C" NOT NULL
      - ha_value    TEXT COLLATE "C"
      - valid_until TIMESTAMP WITH TIME ZONE NOT NULL
    delegate_to: 127.0.0.1
  - name: create user for vault
    postgresql_user:
      name: '{{vault_db_user}}'
      db: '{{vault_db}}'
      login_host: '{{ansible_host}}'
      login_password: '{{login_password}}'
      password: '{{vault_db_password}}'
      encrypted: yes
      state: present
      priv: CONNECT/{{kv_table}}:ALL/{{ha_table}}:ALL
    delegate_to: 127.0.0.1

- name: install vault
  hosts: vault
  vars:
    # Docker refuses to update secrets if those are used
    # So if the step "prepare vault configuration" fails either:
    # a) destroy the vault service
    # b) add here next line, with higher number
    config_names:
    - vault_config
    - vault_config_1
    - vault_config_2
    - vault_config_3
  vars_files:
  - setup_vault_vars.yaml
  - setup_vault_vault.yaml
  tasks:
  - name: start docker swarm
    docker_swarm:
      state: present
      advertise_addr: '{{swarm_addr}}'
  - name: download vault image
    docker_image:
      name: vault:1.3.3
      source: pull
      state: present
  - name: prepare vault configuration
    docker_secret:
      name: "{{config_names | last}}"
      state: present
      data: "{{lookup('template', './vault_config_template.j2')}}"
  - name: start vault service
    docker_swarm_service:
      name: vaulttest
      state: present
      args:
      - server
      image: vault:1.3.3
      replicas: 1
      mounts:
      - type: volume
        source: vault_test_logs
        target: /vault/logs
      secrets:
      - secret_name: "{{config_names | last}}"
        filename: /vault/config/vault.hcl
  - name: cleanup old vault configuration
    docker_secret:
     name: "{{item}}"
     state: absent
    loop: "{{config_names}}"
    loop_control:
      extended: yes
    when: not ansible_loop.last
  - name: wait for vault to start
    wait_for:
      host: 172.17.0.6
      port: 8200
      timeout: 120

- name: Initialize vault
  hosts: localhost-py3
  gather_facts: no
  tasks:
  - name: Check vault status
    hashivault_status:
      url: http://172.17.0.6:8200/
    register: vault_status
  - block:
    - name: Initialize vault
      hashivault_init:
        url: http://172.17.0.6:8200/
        secret_shares: 1
        secret_threshold: 1
      register: vault_init
    - name: display root token
      debug:
        msg: The root token is {{vault_init.root_token}}
    - name: display unseal keys
      debug:
        msg: The unseal key part {{index + 1}} is {{item}}
      loop: "{{vault_init.keys_base64}}"
      loop_control:
        index_var: index
    when: not vault_status.status.initialized
