Test of setting up vault with postgresql storage backend using ansible


Postgresql database for storage:
Default PostgreSQL container, with data stored on a docker volume. Not
initialised (except master user password), all initialisation is to be
performed via ansible.
* Start container with ./postgres_start.sh
* Stop container with ./postgres_stop.sh
* Remove the container and data volume with ./postgres_clean.sh

Ansible is set-up via virtualenv, and requires python 3 (at least 3.6) and
virtualenv installed. The specific version of virtualenv is not required, as
initial one is used only to install the required version.

Setup the environment once with ./virtualenv_setup.sh. After that activate the
virtual environment by running `source venv/bin/activate`, or `.
venv/bin/activate` - note the leading dot. The second step needs to be done
once per session. After that all ansible commands are available.

Run the playbook ansible/setup_vault.yaml to setup the database and docker
vault service on the requested machines. Use the command
ansible-playbook -i ansible/inventory playbook/setup_vault.yaml --ask-vault-pass

After Vault is initialized and unsealed you can run the playbook
ansible/configure_vault.yaml to apply required vault configuration.


Note that this is only a Proof-of-Concept, that largely depends on hardcoded IP
addresses, so the docker networks you have devined as well as order of starting
containers really matters.


The password for ansible vault, as this is a PoC, is 'password'.
